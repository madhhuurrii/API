{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","useEffect","fetch","method","headers","then","res","json","sort","a","b","parseInt","id","catch","err","console","log","className","length","map","item","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAqEeA,MAjEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA+BA,OAJAC,qBAAU,WAzBRC,IAJQ,6BAIG,CACTC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACE,GACLA,EAAKC,MAAK,SAACC,EAAGC,GACZ,OAAIC,SAASF,EAAEG,IAAMD,SAASD,EAAEE,IACvB,EACED,SAASF,EAAEG,IAAMD,SAASD,EAAEE,KAC7B,EAED,KAGXZ,EAAQO,MAETM,OAAM,SAACC,GACNC,QAAQC,IAAI,eAKf,IAGD,qBAAKC,UAAU,MAAf,SACE,iCACE,wBAAOA,UAAU,MAAjB,UACE,+BACE,6BACE,2CAEF,6BACE,gDAGJ,+BACE,6BACGlB,GACCA,EAAKmB,OAAS,GACdnB,EAAKoB,KAAI,SAACC,GAAD,OAAU,+BAAKA,EAAKR,GAAV,gBAEvB,6BACGb,GACCA,EAAKmB,OAAS,GACdnB,EAAKoB,KAAI,SAACC,GAAD,OAAU,+BAAKA,EAAKC,KAAV,2BC7CpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7277c566.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport fetch from 'node-fetch'\nconst api = 'http://localhost:3000/data'\nfunction App() {\n  const [data, setData] = useState([])\n  const getData = () => {\n    fetch(api, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        return res.json()\n      })\n      .then((json) => {\n        json.sort((a, b) => {\n          if (parseInt(a.id) > parseInt(b.id)) {\n            return 1\n          } else if (parseInt(a.id) < parseInt(b.id)) {\n            return -1\n          } else {\n            return 0\n          }\n        })\n        setData(json)\n      })\n      .catch((err) => {\n        console.log('ERROR!')\n      })\n  }\n  useEffect(() => {\n    getData()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <center>\n        <table className=\"App\">\n          <tr>\n            <th>\n              <h1>ID &nbsp;</h1>\n            </th>\n            <th>\n              <h1>Name &nbsp;</h1>\n            </th>\n          </tr>\n          <tr>\n            <td>\n              {data &&\n                data.length > 0 &&\n                data.map((item) => <h2>{item.id} &nbsp;</h2>)}\n            </td>\n            <td>\n              {data &&\n                data.length > 0 &&\n                data.map((item) => <h2>{item.name} &nbsp;</h2>)}\n            </td>\n          </tr>\n        </table>\n      </center>\n      {/* {\n         data && data.length>0 && data.map((item)=><h2>{item.id} &nbsp; {item.name}</h2>)\n       } */}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}